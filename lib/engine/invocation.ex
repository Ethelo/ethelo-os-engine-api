defmodule Engine.Invocation do
  @moduledoc """
  The boundary for communicating with the Engine.

  All access to update database values go through this class.
  To keep code files small, the longer methods are in the /queries folder
  and are linked with defdelegate
  """
  alias Engine.Scenarios.Dispatcher
  alias Engine.Invocation.Builder
  alias Engine.Invocation.DecisionJson
  alias Engine.Invocation.ConfigJson
  alias Engine.Invocation.Queries.Cache
  alias Engine.Invocation.ScenarioSolve
  alias Engine.Invocation.ScoringData
  alias Engine.Invocation.ScenarioHashes

  @doc """
  triggers a solve call on the engine.
  It accepts a set of json files generated by
   build_solve_settings/2 or invocation_jsons/2

  See Engine.Invocation.ScenarioSolve for error and response handling.

  """
  def engine_solve(files, options) do
    Engine.Driver.call(:solve, files, options)
  end

  @doc """
  generates the a preprocessed file for the decision.
  This allows the engine to skip duplicate steps and solve faster.
  It accepts a decision json file generated by build_decision_json/2
  """
  def engine_preprocessed(decision_json) do
    Engine.Driver.call(:preproc, decision_json)
  end

  @doc """
  checks if a particular decision json is valid
  It accepts a decision json file generated by build_decision_json/2
  """
  def engine_validate(decision_json) do
    Engine.Driver.call(:validate, {:decision, decision_json})
  end

  @doc """
  Generates json files for invocation for use in export files
  This method skips checks for valid solve settings.

  """
  defdelegate invocation_jsons(decision_id, options \\ []), to: Builder

  @doc """
  Generates a SolveSettings object complete with appropraite
  ScenarioSet model and engine JSON files
  This method skips checks for valid solve settings and will not generate files
  for solves that have already been sent to the engine
  """
  defdelegate build_solve_settings(decision_id, options), to: Builder

  @doc """
  Passes solve settings data to engine
  """
  defdelegate solve_decision(decision_id, options \\ []), to: ScenarioSolve

  @doc """
  Generates json content that describes the structure of the decision for the engine.
  """
  defdelegate build_decision_json(decision_id, pretty \\ false), to: DecisionJson, as: :build_json

  @doc """
  Generates json content that describes the solve options the engine should use.
  """
  defdelegate build_config_json(scenario_config, option_categories, pretty \\ false),
    to: ConfigJson,
    as: :build_json

  def decision_key(), do: "published_decision"

  def preprocessed_key(), do: "published_decision_preprocessed"

  def scenario_config_key(scenario_config_id),
    do: "published_scenario_config_#{scenario_config_id}"

  @doc """
  Update Decision json in the cache so it can be used in future solves.
  """
  defdelegate update_decision_cache(decision_id), to: Cache

  @doc """
  Update the preprocessed decision file in the cache so it can be used in future solves.
  """
  defdelegate update_preprocessed_cache(decision_json, decision_id), to: Cache
  @doc """
  Update the ScenarioConfig file in the cache so it can be used in future solves.
  """
  defdelegate update_scenario_config_cache(scenario_config_id, decision_id), to: Cache

  def get_decision_cache_value(decision_id) do
    Cache.get_cache_value(decision_key(), decision_id)
  end

  def get_decision_preprocessed_cache_value(decision_id) do
    Cache.get_cache_value(preprocessed_key(), decision_id) || ""
  end
  def get_scenario_config_cache_value(scenario_config_id, decision_id) do
    Cache.get_cache_value(scenario_config_key(scenario_config_id), decision_id)
  end

  def delete_decision_cache_value(decision_id) do
    Cache.delete_cache_value(decision_key(), decision_id)
  end

  def delete_decision_preprocessed_cache_value(decision_id) do
    Cache.delete_cache_value(preprocessed_key(), decision_id)
  end
  def delete_scenario_config_cache_value(scenario_config_id, decision_id) do
    Cache.delete_cache_value(scenario_config_key(scenario_config_id), decision_id)
  end

  defdelegate group_voting_data(
                decision_id,
                scenario_config_id \\ nil,
                enabled_only \\ true,
                exclude_deleted \\ true
              ),
              to: ScoringData,
              as: :initialize_all_voting

  defdelegate participant_voting_data(
                decision_id,
                participant_id,
                scenario_config_id \\ nil,
                enabled_only \\ true,
                exclude_deleted \\ true
              ),
              to: ScoringData,
              as: :initialize_single_voting

  defdelegate dispatch_solve(decision_id, options \\ []), to: Dispatcher

  defdelegate generate_scenario_config_hash(decision_id, scenario_config, for_cached_decision),
    to: ScenarioHashes

  defdelegate generate_group_influent_hash(decision_id), to: ScenarioHashes
  defdelegate generate_weighting_hash(decision_id, participant \\ nil), to: ScenarioHashes
  defdelegate generate_participant_influent_hash(participant), to: ScenarioHashes
end
